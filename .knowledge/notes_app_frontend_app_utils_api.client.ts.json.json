{"is_source_file": true, "format": "TypeScript", "description": "This file is a client-side API utility module simulating CRUD operations and authentication flows using localStorage for data persistence in a notes application. It defines types for notes and users, functions for session management, note CRUD operations, and user sign-in/sign-out, serving as a mock backend API layer.", "external_files": [], "external_methods": [], "published": ["Note", "User", "getSessionUser", "signIn", "signOut", "listNotes", "createNote", "getNote", "updateNote", "deleteNote"], "classes": [], "methods": [{"name": "function readJSON<T>(key: string, fallback: T): T { readJSON", "description": "Reads and parses a JSON object from localStorage, returning a fallback value if retrieval or parsing fails.", "scope": "", "scopeKind": ""}, {"name": "function writeJSON<T>(key: string, value: T) { writeJSON", "description": "Serializes a value to JSON and stores it in localStorage under the specified key.", "scope": "", "scopeKind": ""}, {"name": "function uid() { uid", "description": "Generates a pseudo-unique identifier using random numbers and the current timestamp.", "scope": "", "scopeKind": ""}, {"name": "export async function getSessionUser(): Promise<User | null> { getSessionUser", "description": "Retrieves the current session user based on stored session data.", "scope": "", "scopeKind": ""}, {"name": "export async function signIn(email: string): Promise<User> { signIn", "description": "Simulates user sign-in by creating or retrieving a user record based on email and storing the session.", "scope": "", "scopeKind": ""}, {"name": "export async function signOut(): Promise<void> { signOut", "description": "Clears the session data from localStorage, effectively signing the user out.", "scope": "", "scopeKind": ""}, {"name": "export async function listNotes(params: { listNotes", "description": "Fetches notes for a user, supports filtering by query, star status, recency, and tags.", "scope": "", "scopeKind": ""}, {"name": "export async function createNote(input: { createNote", "description": "Creates a new note with provided details and stores it locally.", "scope": "", "scopeKind": ""}, {"name": "export async function getNote(id: string): Promise<Note | null> { getNote", "description": "Retrieves a specific note by its ID.", "scope": "", "scopeKind": ""}, {"name": "export async function updateNote( updateNote", "description": "Updates fields of an existing note identified by its ID.", "scope": "", "scopeKind": ""}, {"name": "export async function deleteNote(id: string): Promise<boolean> { deleteNote", "description": "Deletes a note by its ID.", "scope": "", "scopeKind": ""}], "calls": ["readJSON", "writeJSON", "Math.random", "Date.now", "window.localStorage.getItem", "window.localStorage.setItem", "window.localStorage.removeItem"], "search-terms": ["localStorage API client", "notes CRUD", "simulated auth", "local storage notes", "client-side notes app"], "state": 2, "file_id": 13, "knowledge_revision": 55, "git_revision": "", "revision_history": [{"29": ""}, {"55": ""}], "ctags": [{"_type": "tag", "name": "Note", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export type Note = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "STORAGE_KEYS", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^const STORAGE_KEYS = {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "User", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export type User = {$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "before", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const before = notes.length;$/", "language": "TypeScript", "kind": "constant", "scope": "deleteNote", "scopeKind": "function"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function createNote(input: {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function deleteNote(id: string): Promise<boolean> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function getNote(id: string): Promise<Note | null> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getSessionUser", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function getSessionUser(): Promise<User | null> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const idx = notes.findIndex((n) => n.id === id);$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const updated: Note = { ...notes[idx], ...patch, updatedAt: Date.now() };$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "listNotes", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function listNotes(params: {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "note", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const note: Note = {$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const notes = readJSON<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const notes = readJSON<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "getNote", "scopeKind": "function"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const notes = readJSON<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "now", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const now = Date.now();$/", "language": "TypeScript", "kind": "constant", "scope": "createNote", "scopeKind": "function"}, {"_type": "tag", "name": "q", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^    const q = params.q.toLowerCase();$/", "language": "TypeScript", "kind": "constant", "scope": "listNotes", "scopeKind": "function"}, {"_type": "tag", "name": "raw", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^    const raw = window.localStorage.getItem(key);$/", "language": "TypeScript", "kind": "constant", "scope": "readJSON", "scopeKind": "function"}, {"_type": "tag", "name": "readJSON", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^function readJSON<T>(key: string, fallback: T): T {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "session", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const session = readJSON<{ userId: string } | null>(STORAGE_KEYS.session, null);$/", "language": "TypeScript", "kind": "constant", "scope": "getSessionUser", "scopeKind": "function"}, {"_type": "tag", "name": "signIn", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function signIn(email: string): Promise<User> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "signOut", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function signOut(): Promise<void> {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "uid", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^function uid() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^export async function updateNote($/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "updated", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const updated: Note = { ...notes[idx], ...patch, updatedAt: Date.now() };$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "updatedAt", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const updated: Note = { ...notes[idx], ...patch, updatedAt: Date.now() };$/", "language": "TypeScript", "kind": "constant", "scope": "updateNote", "scopeKind": "function"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const users = readJSON<User[]>(STORAGE_KEYS.users, []);$/", "language": "TypeScript", "kind": "constant", "scope": "getSessionUser", "scopeKind": "function"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^  const users = readJSON<User[]>(STORAGE_KEYS.users, []);$/", "language": "TypeScript", "kind": "constant", "scope": "signIn", "scopeKind": "function"}, {"_type": "tag", "name": "writeJSON", "path": "/home/kavia/workspace/code-generation/note-organizer-14759-14771/notes_app_frontend/app/utils/api.client.ts", "pattern": "/^function writeJSON<T>(key: string, value: T) {$/", "language": "TypeScript", "kind": "function"}], "hash": "10d10b70bd2785fd0509a36e6ad59a65", "format-version": 4, "code-base-name": "notes_app_frontend", "filename": "notes_app_frontend/app/utils/api.client.ts"}